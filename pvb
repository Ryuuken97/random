-- // === Services === //
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local VirtualUser = game:GetService("VirtualUser")

-- // === Utility === //
local function getSeedsList()
    local seeds = {}
    local seedsFolder = ReplicatedStorage:WaitForChild("Assets"):WaitForChild("Seeds")
    local Util = require(ReplicatedStorage:WaitForChild("Modules"):WaitForChild("Utility"):WaitForChild("Util"))

    for _, seed in ipairs(seedsFolder:GetChildren()) do
        local seedEntry = Util:GetSeedEntry(seed.Name)
        if seedEntry and not seedEntry.Hidden then
            table.insert(seeds, seed.Name)
        end
    end
    table.sort(seeds)
    return seeds
end

local function getGearsList()
    local gears = {}
    local gearsFolder = ReplicatedStorage:WaitForChild("Assets"):WaitForChild("Gears")
    for _, gear in ipairs(gearsFolder:GetChildren()) do
        if gear:GetAttribute("Price") then
            table.insert(gears, gear.Name)
        end
    end
    table.sort(gears)
    return gears
end

local gearList = getGearsList()
local seedList = getSeedsList()

-- // === Flags === //
local buyingSeedsActive = false
local buyingGearsActive = false
local buyingSelectedSeedsActive = false
local buyingSelectedGearsActive = false
local equipBrainrotsActive = false
local equipBrainrotsInterval = 60
local antiAfkEnabled = false
local reconnectEnabled = false

-- selected
local selectedSeeds = {}
local selectedGears = {}

-- // === Rayfield Library === //
local Rayfield = loadstring(game:HttpGet(
    'https://raw.githubusercontent.com/Ryuuken97/Rayfield/refs/heads/main/source.lua'))()

local Window = Rayfield:CreateWindow({
    Name = "RystHub",
    Icon = "sparkles", -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
    LoadingTitle = "RystHub",
    LoadingSubtitle = "by Ryuuken",
    ShowText = "RystHub",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "PvB",
        FileName = "RystHub"
    },
    KeySystem = false,
})

-- // === Tabs === //
local EquipTab = Window:CreateTab("Auto Equip", "repeat")
local BuyTab = Window:CreateTab("Auto Buy", "shopping-cart")
local MiscTab = Window:CreateTab("Misc", "cog")

-- // === Auto Buy Seeds === //
local AutoBuySeedsSection = BuyTab:CreateSection("Auto Buy Seeds")

BuyTab:CreateDropdown({
    Name = "Select Seeds",
    Options = seedList,
    CurrentOption = {},
    MultipleOptions = true,
    Flag = "SelectedSeeds",
    Callback = function(opts)
        selectedSeeds = opts or {}
    end,
})

BuyTab:CreateToggle({
    Name = "Buy Selected Seeds",
    CurrentValue = false,
    Flag = "BuySelectedSeeds",
    Callback = function()
        buyingSelectedSeedsActive = not buyingSelectedSeedsActive
        Rayfield:Notify({
            Title = "Auto Buy Seeds",
            Content = buyingSelectedSeedsActive and "Started buying selected seeds" or "Stopped buying selected seeds",
            Duration = 3
        })
    end,
})

BuyTab:CreateToggle({
    Name = "Buy All Seeds",
    CurrentValue = false,
    Flag = "BuyAllSeeds",
    Callback = function()
        buyingSeedsActive = not buyingSeedsActive
        Rayfield:Notify({
            Title = "Auto Buy Seeds",
            Content = buyingSeedsActive and "Started buying seeds" or "Stopped buying seeds",
            Duration = 3
        })
    end,
})

task.spawn(function()
    while task.wait(0.1) do
        if buyingSeedsActive then
            for _, seed in ipairs(seedList) do
                if not buyingSeedsActive then break end
                pcall(function()
                    ReplicatedStorage.Remotes.BuyItem:FireServer(seed, true)
                end)
                task.wait(0.1)
            end
        elseif buyingSelectedSeedsActive then
            if #selectedSeeds == 0 then
                task.wait(0.25)
            else
                for _, seed in ipairs(selectedSeeds) do
                    if not buyingSelectedSeedsActive then break end
                    pcall(function()
                        ReplicatedStorage.Remotes.BuyItem:FireServer(seed, true)
                    end)
                    task.wait(0.1)
                end
            end
        else
            task.wait(0.1)
        end
    end
end)

-- // === Auto Buy Gears === //
local AutoBuyGearsSection = BuyTab:CreateSection("Auto Buy Gears")

BuyTab:CreateDropdown({
    Name = "Pilih Gears",
    Options = gearList,
    CurrentOption = {},
    MultipleOptions = true,
    Flag = "SelectedGears",
    Callback = function(opts)
        selectedGears = opts or {}
    end,
})

BuyTab:CreateToggle({
    Name = "Buy Selected Gears",
    CurrentValue = false,
    Flag = "BuySelectedGears",
    Callback = function()
        buyingSelectedGearsActive = not buyingSelectedGearsActive
        Rayfield:Notify({
            Title = "Auto Buy Gears",
            Content = buyingSelectedGearsActive and "Started buying selected gears" or "Stopped buying selected gears",
            Duration = 3
        })
    end
})

BuyTab:CreateToggle({
    Name = "Buy All Gears",
    CurrentValue = false,
    Flag = "BuyAllGears",
    Callback = function()
        buyingGearsActive = not buyingGearsActive
        Rayfield:Notify({
            Title = "Auto Buy Gears",
            Content = buyingGearsActive and "Started buying gears" or "Stopped buying gears",
            Duration = 3
        })
    end
})

task.spawn(function()
    while task.wait(0.1) do
        if buyingGearsActive then
            for _, gear in ipairs(gearList) do
                if not buyingGearsActive then break end
                pcall(function()
                    ReplicatedStorage.Remotes.BuyGear:FireServer(gear, true)
                end)
                task.wait(0.1)
            end
        elseif buyingSelectedGearsActive then
            if #selectedGears == 0 then
                task.wait(0.25)
            else
                for _, gear in ipairs(selectedGears) do
                    if not buyingSelectedGearsActive then break end
                    pcall(function()
                        ReplicatedStorage.Remotes.BuyGear:FireServer(gear, true)
                    end)
                    task.wait(0.1)
                end
            end
        else
            task.wait(0.1)
        end
    end
end)

-- // === Equip Best Brainrots === //
local EquipSection = EquipTab:CreateSection("Auto Equip Brainrots")

EquipTab:CreateInput({
    Name = "Auto Equip Interval (seconds)",
    PlaceholderText = "60",
    RemoveTextAfterFocusLost = false,
    Callback = function(text)
        local num = tonumber(text)
        if num and num > 0 then
            equipBrainrotsInterval = num
        end
    end
})

EquipTab:CreateToggle({
    Name = "Auto Equip Best Brainrots",
    CurrentValue = false,
    Flag = "AutoEquipBestBrainrots",
    Callback = function(state)
        equipBrainrotsActive = state
        Rayfield:Notify({
            Title = "Auto Equip Best Brainrots",
            Content = state and "Auto Equip Best Brainrots ON" or "Auto Equip Best Brainrots OFF",
            Duration = 3
        })
    end
})

task.spawn(function()
    while task.wait(1) do
        if equipBrainrotsActive then
            pcall(function()
                ReplicatedStorage.Remotes.EquipBestBrainrotss:FireServer()
            end)
            task.wait(equipBrainrotsInterval)
        end
    end
end)

-- // === Misc Tab (Anti AFK + Reconnect) === //
MiscTab:CreateSection("System")

MiscTab:CreateToggle({
    Name = "Anti AFK",
    CurrentValue = false,
    Flag = "AntiAFK",
    Callback = function(state)
        antiAfkEnabled = state
        if state then
            Rayfield:Notify({ Title = "Anti AFK", Content = "Enabled", Duration = 3 })
            task.spawn(function()
                while antiAfkEnabled do
                    task.wait(240)
                    pcall(function()
                        VirtualUser:CaptureController()
                        VirtualUser:ClickButton2(Vector2.new())
                    end)
                end
            end)
        else
            Rayfield:Notify({ Title = "Anti AFK", Content = "Disabled", Duration = 3 })
        end
    end
})

MiscTab:CreateToggle({
    Name = "Auto Reconnect",
    CurrentValue = false,
    Flag = "AutoReconnect",
    Callback = function(state)
        reconnectEnabled = state
        if state then
            Rayfield:Notify({ Title = "Reconnect", Content = "Enabled", Duration = 3 })
            task.spawn(function()
                while reconnectEnabled do
                    if not game:IsLoaded() then
                        task.wait(5)
                        pcall(function()
                            game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId,
                                LocalPlayer)
                        end)
                    end
                    task.wait(10)
                end
            end)
        else
            Rayfield:Notify({ Title = "Reconnect", Content = "Disabled", Duration = 3 })
        end
    end
})

-- // Finish //
Rayfield:Notify({
    Title = "RystHub",
    Content = "RystHub Script Loaded Successfully!",
    Duration = 5
})

Rayfield:LoadConfiguration()
