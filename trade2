-- =========================================================
-- [ DEPENDENCIES & VARIABLES ]
-- =========================================================

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local HttpService = game:GetService("HttpService")
local workspace = game:GetService("Workspace")
local VirtualUser = game:GetService("VirtualUser")
local TeleportService = game:GetService("TeleportService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")

-- Pemuatan WindUI
local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local net = ReplicatedStorage:WaitForChild("Packages")
	:WaitForChild("_Index")
	:WaitForChild("sleitnick_net@0.2.0")
	:WaitForChild("net")

-- [ NOTIFICATION FUNCTIONS ]

local function NotifySuccess(title, message, duration)
	WindUI:Notify({
		Title = title,
		Content = message,
		Duration = duration or 3,
		Icon = "circle-check",
	})
end

local function NotifyError(title, message, duration)
	WindUI:Notify({
		Title = title,
		Content = message,
		Duration = duration or 3,
		Icon = "ban",
	})
end

local function NotifyInfo(title, message, duration)
	WindUI:Notify({
		Title = title,
		Content = message,
		Duration = duration or 3,
		Icon = "info",
	})
end

local function NotifyWarning(title, message, duration)
	WindUI:Notify({
		Title = title,
		Content = message,
		Duration = duration or 3,
		Icon = "triangle-alert",
	})
end

-- [ UTILITY & SETUP ]

-- Anti-AFK Bawaan
LocalPlayer.Idled:Connect(function()
    VirtualUser:Button2Down(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
    task.wait(1)
    VirtualUser:Button2Up(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
end)

for i,v in next, getconnections(game:GetService("Players").LocalPlayer.Idled) do
    v:Disable()
end

-- Teleport Reconnect
local PlaceId = game.PlaceId
local function AutoReconnect()
    while task.wait(5) do
        if not Players.LocalPlayer or not Players.LocalPlayer:IsDescendantOf(game) then
            TeleportService:Teleport(PlaceId)
        end
    end
end
task.spawn(AutoReconnect)


-- =========================================================
-- [ UI SETUP ]
-- =========================================================

local Window = WindUI:CreateWindow({
	Title = "Trade & Teleport",
	Icon = "handshake",
	Author = "by dio",
	Size = UDim2.fromOffset(400, 450),
	Transparent = true,
	Theme = "Dark",
})

Window:SetToggleKey(Enum.KeyCode.G)

local TradeTab = Window:Tab({
	Title = "Trade",
	Icon = "handshake",
})

local SettingsTab = Window:Tab({ 
	Title = "Settings", 
	Icon = "cog" 
})

local ConfigManager = Window.ConfigManager
local myConfig = ConfigManager:CreateConfig("QuietXTradeConfig")

-- [ KONFIRMASI AWAL ]
local confirmed = false
WindUI:Popup({
    Title = "Important!",
    Icon = "rbxassetid://129260712070622",
    Content = [[
Trade Module Loaded!
]],
    Buttons = {
        { Title = "Close", Variant = "Secondary", Callback = function() end },
        { Title = "Next", Variant = "Primary", Callback = function() confirmed = true end },
    }
})

repeat task.wait() until confirmed

WindUI:Notify({
	Title = "dionendrahub Trade Module",
	Content = "Trade Features Loaded!",
	Duration = 5,
	Image = "square-check-big"
})

-- =========================================================
-- [ TELEPORT FUNCTION ]
-- =========================================================

local function teleportToPlayerExact(targetPlayer)
	local targetChar = targetPlayer.Character
	local myChar = LocalPlayer.Character

	if targetChar and myChar then
		local targetHRP = targetChar:FindFirstChild("HumanoidRootPart")
		local myHRP = myChar:FindFirstChild("HumanoidRootPart")
		if targetHRP and myHRP then
			-- Teleport 2 studs di depan target
			myHRP.CFrame = targetHRP.CFrame * CFrame.new(0, 0, -2)
			NotifySuccess("Teleport Successfully", "Successfully Teleported to " .. targetPlayer.DisplayName .. "!", 3)
			return true
		end
	end
	NotifyError("Teleport Failed", "Target player character or HRP not found.", 3)
	return false
end

-- =========================================================
-- [ TRADING FUNCTIONS & VARIABLES ]
-- =========================================================

local TradeFunction = {
	TempTradeList = {},
	saveTempMode = false,
	onTrade = false, -- Untuk Single Item Trade
	targetUserId = nil,
	tradingInProgress = false,
	autoAcceptTrade = false,
	AutoTrade = false, -- Untuk Mass Trade
}

local REEquipItem = net["RE/EquipItem"]
local RFAwaitTradeResponse = net["RF/AwaitTradeResponse"]
local InitiateTrade = net["RF/InitiateTrade"]

local function getPlayerListWithNone()
	local list = { "None" } -- Nilai default
	for _, player in ipairs(Players:GetPlayers()) do
		if player ~= LocalPlayer then
			table.insert(list, player.DisplayName .. " (" .. player.Name .. ")")
		end
	end
	return list
end

local TradeTargetDropdown = TradeTab:Dropdown({
	Title = "Select Target (Trade/Teleport)",
	Values = getPlayerListWithNone(),
	Value = "None", -- Default None
	Callback = function(selected)
		if selected == "None" then
			TradeFunction.targetUserId = nil
			NotifyInfo("Target Cleared", "Trade target has been set to None.")
			return
		end

		local username = selected:match("%((.-)%)")
		local player = Players:FindFirstChild(username)

		if player then
			-- Fitur Teleportasi
			if teleportToPlayerExact(player) then
				-- Jika teleport berhasil, set juga untuk target trade
				TradeFunction.targetUserId = player.UserId
			else
				TradeFunction.targetUserId = nil
				NotifyError("Action Failed", "Could not teleport to or set target for trade.")
			end
		else
			TradeFunction.targetUserId = nil
			NotifyError("Player Target", "Player not found!")
		end
	end,
})

local function refreshDropdown()
	local updatedList = getPlayerListWithNone()
	TradeTargetDropdown:Refresh(updatedList)
end

Players.PlayerAdded:Connect(refreshDropdown)
Players.PlayerRemoving:Connect(refreshDropdown)

refreshDropdown()

TradeTab:Toggle({
	Title = "Mode Save Items (Mass Trade)",
	Desc = "Click inventory item to add for Mass Trade. No notification will show on click.",
	Value = false,
	Callback = function(state)
		TradeFunction.saveTempMode = state
		if state then
			TradeFunction.TempTradeList = {}
			NotifyInfo("Save Mode Active", "Click items to save. Notifications are off.")
		else
			NotifyInfo("Save Mode Disabled", "Saved " .. #TradeFunction.TempTradeList .. " items for Mass Trade.")
		end
	end,
})

-- KODE NAME CALL HOOK YANG DIPERKUAT
local mt = getrawmetatable(game)
local oldNamecall = mt.__namecall
setreadonly(mt, false)

mt.__namecall = newcclosure(function(self, ...)
	local args = { ... }
	local method = getnamecallmethod()

	-- Pastikan hanya memproses RE/EquipItem remote
	if tostring(self) == "RE/EquipItem" and method == "FireServer" and tostring(self) == tostring(REEquipItem) then
		local uuid = args[1]
		local categoryName = args[2]

		-- Mode Save Items (Mass Trade)
		if TradeFunction.saveTempMode then
			if uuid and categoryName then
				table.insert(TradeFunction.TempTradeList, { UUID = uuid, Category = categoryName })
				-- Notifikasi berhasil menyimpan item DIHAPUS (Permintaan user)
			end
			return nil -- Blokir remote call agar item tidak ter-equip

		-- Mode Trade (Single Item, HARUS EQUIP DULU)
		elseif TradeFunction.onTrade then
			
            if not TradeFunction.targetUserId then
                NotifyError("Trade Failed", "No trade target selected (dropdown is 'None').")
                return nil
            end
            
			-- 1. Jalankan remote call aslinya (Ini yang akan meng-equip item)
			local result = oldNamecall(self, unpack(args))
			task.wait(0.1) -- Tunggu sebentar setelah equip terjadi

			-- 2. Lanjutkan dengan mengirim trade
			if uuid then
                local targetPlayer = Players:GetPlayerByUserId(TradeFunction.targetUserId)
                
                -- Memastikan target player valid sebelum InvokeServer
                if targetPlayer then
                    InitiateTrade:InvokeServer(TradeFunction.targetUserId, uuid, categoryName)
                    NotifySuccess("Trade Sent", "Trade sent to " .. targetPlayer.Name .. "!")
                else
                    NotifyError("Trade Failed", "Target player left the server.")
                end
			else
				NotifyError("Trade Failed", "Invalid item UUID.")
			end
			return result -- Kembalikan nilai asli.
		end
	end

	return oldNamecall(self, unpack(args))
end)

setreadonly(mt, true)
-- AKHIR KODE NAME CALL HOOK YANG DIPERKUAT

local function TradeAll()
	if TradeFunction.tradingInProgress then
		NotifyWarning("Mass Trade", "Trade already in progress!")
		return
	end
	if not TradeFunction.targetUserId then
		NotifyError("Mass Trade", "Set trade target first!")
		return
	end
	if #TradeFunction.TempTradeList == 0 then
		NotifyWarning("Mass Trade", "No items saved!")
		return
	end

	TradeFunction.tradingInProgress = true
	NotifyInfo("Mass Trade", "Starting trade of " .. #TradeFunction.TempTradeList .. " items...")

	task.spawn(function()
		local successCount = 0
		for i, item in ipairs(TradeFunction.TempTradeList) do
			if not TradeFunction.AutoTrade then
				NotifyWarning("Mass Trade", "Auto Trade stopped manually!")
				break
			end

			local uuid = item.UUID
			local category = item.Category

			NotifyInfo("Mass Trade", "Trade item " .. i .. " of " .. #TradeFunction.TempTradeList)

			-- Kirim trade request
			InitiateTrade:InvokeServer(TradeFunction.targetUserId, uuid, category)

			-- Tunggu notifikasi "Trade completed!"
			local tradeCompleted = false
			local timeout = 10
			local elapsed = 0

			local notifGui = LocalPlayer.PlayerGui:WaitForChild("Text Notifications", 10)
			local connection

			if notifGui then
				connection = notifGui.Frame.ChildAdded:Connect(function(child)
					task.wait(0.5)
					local header = child:FindFirstChild("Header")
					if header and header:IsA("TextLabel") and header.Text == "Trade completed!" then
						tradeCompleted = true
					end
				end)
			end

			repeat
				task.wait(0.2)
				elapsed += 0.2
			until tradeCompleted or elapsed >= timeout

			if connection then
				connection:Disconnect()
			end

			if tradeCompleted then
				successCount += 1
				NotifySuccess(
					"Mass Trade",
					"Success " .. i .. " of " .. #TradeFunction.TempTradeList .. ". Waiting for next..."
				)
				task.wait(6.5) -- Cooldown antar trade
			else
				NotifyWarning("Mass Trade", "Trade timeout/failed for item " .. i .. ". Proceeding...")
				task.wait(2)
			end
		end

		NotifySuccess(
			"Mass Trade",
			"Finished trading! Total success: " .. successCount .. "/" .. #TradeFunction.TempTradeList
		)
		TradeFunction.tradingInProgress = false
		TradeFunction.TempTradeList = {} -- Hapus daftar setelah selesai
	end)
end

TradeTab:Toggle({
	Title = "Auto Trade (Mass Trade)",
	Desc = "Trade all saved items automatically",
	Value = false,
	Callback = function(state)
		TradeFunction.AutoTrade = state
		if TradeFunction.AutoTrade then
			if #TradeFunction.TempTradeList == 0 then
				NotifyError("Mass Trade", "No items saved to trade! Enable 'Mode Save Items' and click items first.")
				TradeFunction.AutoTrade = false
				return
			end
			TradeAll()
			NotifySuccess("Mass Trade", "Auto Trade Enabled")
		else
			NotifyWarning("Mass Trade", "Auto Trade Disabled")
		end
	end,
})

local OTBlockNotif = true -- Digunakan untuk memblokir notifikasi toggle pertama

TradeTab:Toggle({
	Title = "Trade (Single Item)",
	Desc = "Click an inventory item to send trade instantly (Requires item to be equipped first)",
	Value = false,
	Callback = function(state)
		if OTBlockNotif then
			OTBlockNotif = false
			return
		end
		TradeFunction.onTrade = state
		if state then
			NotifySuccess("Trade Mode Active", "Click an item to equip and send trade.")
		else
			NotifyWarning("Trade Mode Disabled", "Single Item Trade Mode Disabled.")
		end
	end,
})

-- Hooking RFAwaitTradeResponse untuk Auto Accept
RFAwaitTradeResponse.OnClientInvoke = function(fromPlayer, timeNow)
	if TradeFunction.autoAcceptTrade then
		return true -- Mengembalikan true akan secara otomatis menerima trade
	else
		return nil
	end
end

TradeTab:Toggle({
	Title = "Auto Accept Trade",
	Desc = "Automatically accept incoming trade requests",
	Value = false,
	Callback = function(state)
		TradeFunction.autoAcceptTrade = state
		if state then
			NotifySuccess("Auto Accept Trade", "Enabled")
		else
			NotifyWarning("Auto Accept Trade", "Disabled")
		end
	end,
})

-- =========================================================
-- [ SETTINGS TAB ]
-- =========================================================

local AFKBN = true -- Untuk memblokir notifikasi toggle pertama
local AFKConnection = nil
local TeleportService = game:GetService("TeleportService")

SettingsTab:Toggle({
	Title = "Anti-AFK",
	Value = true,
	Callback = function(Value)
		if AFKBN then
			AFKBN = false
			return
		end
  
		if Value then
			-- Mengaktifkan kembali fungsi Idled bawaan di awal skrip
            LocalPlayer.Idled:Connect(function()
                VirtualUser:Button2Down(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
                task.wait(1)
                VirtualUser:Button2Up(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
            end)
			NotifySuccess("Anti-AFK Activated", "You will now avoid being kicked.")
		else
			-- Menonaktifkan koneksi Idled
            for i,v in next, getconnections(game:GetService("Players").LocalPlayer.Idled) do
                v:Disable()
            end
			NotifySuccess("Anti-AFK Deactivated", "You can now go idle again.")
		end
	end,
})

SettingsTab:Button({
	Title = "Boost FPS (Maximize Performance)",
	Callback = function()
		for _, v in pairs(game:GetDescendants()) do
			if v:IsA("BasePart") then
				v.Material = Enum.Material.SmoothPlastic
				v.Reflectance = 0
			elseif v:IsA("Decal") or v:IsA("Texture") then
				v.Transparency = 1
			end
		end

		local Lighting = game:GetService("Lighting")
		for _, effect in pairs(Lighting:GetChildren()) do
			if effect:IsA("PostEffect") then
				effect.Enabled = false
			end
		end

		Lighting.GlobalShadows = false
		Lighting.FogEnd = 1e10

		settings().Rendering.QualityLevel = Enum.QualityLevel.Level01
        NotifyInfo("FPS Boost", "Performance settings applied.")
	end
})

local function Rejoin()
	local player = Players.LocalPlayer
	if player then
		TeleportService:Teleport(game.PlaceId, player)
	end
end

local function ServerHop()
	local placeId = game.PlaceId
	local servers = {}
	local cursor = ""

	repeat
		local url = "https://games.roblox.com/v1/games/"..placeId.."/servers/Public?sortOrder=Asc&limit=100"
		if cursor ~= "" then
			url = url .. "&cursor=" .. cursor
		end

		local success, result = pcall(function()
			return HttpService:JSONDecode(game:HttpGet(url))
		end)

		if success and result and result.data then
			for _, server in pairs(result.data) do
				if server.playing < server.maxPlayers and server.id ~= game.JobId then
					table.insert(servers, server.id)
				end
			end
			cursor = result.nextPageCursor or ""
		else
			break
		end
	until not cursor or #servers > 0

	if #servers > 0 then
		local targetServer = servers[math.random(1, #servers)]
		TeleportService:TeleportToPlaceInstance(placeId, targetServer, LocalPlayer)
	else
		NotifyError("Server Hop Failed", "No servers available or all are full!")
	end
end

local Keybind = SettingsTab:Keybind({
    Title = "Keybind",
    Desc = "Keybind to open UI",
    Value = "G",
    Callback = function(v)
        Window:SetToggleKey(Enum.KeyCode[v])
    end
})

SettingsTab:Button({
	Title = "Rejoin Server",
	Callback = function()
		Rejoin()
	end,
})

SettingsTab:Button({
	Title = "Server Hop (New Server)",
	Callback = function()
		ServerHop()
	end,
})


SettingsTab:Button({
    Title = "Save",
    Desc = "Save Settings to config",
    Callback = function()
        myConfig:Save()
        NotifySuccess("Config Saved", "Config has been saved!")
    end
})

SettingsTab:Button({
    Title = "Load",
    Desc = "Loads Settings from config",
    Callback = function()
        myConfig:Load()
        NotifySuccess("Config Loaded", "Config has beed loaded!")
    end
})
