-- =========================================================
-- [ DEPENDENCIES & VARIABLES ]
-- =========================================================

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local HttpService = game:GetService("HttpService")
local workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- --- SAFE WINDUI LOADING ---
local success, WindUI = pcall(function()
    local url = "https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"
    local rawCode = game:HttpGet(url, true)
    
    if not rawCode or rawCode:len() < 100 then -- Simple check for failed/empty download
        error("Failed to download WindUI code.")
    end
    
    local loadedFunction = loadstring(rawCode)
    
    if not loadedFunction then
        error("Failed to load WindUI using loadstring.")
    end
    
    return loadedFunction()
end)

if not success or not WindUI or type(WindUI) ~= "table" then
    warn("FATAL ERROR: Failed to load WindUI. Execution halted.")
    -- Optionally, provide a visual error if an environment allows:
    -- print("Error loading WindUI: " .. tostring(WindUI or "Unknown error"))
    return -- Stop script execution if UI library fails
end

-- --- NET LIBRARY LOADING ---
local net
local netSuccess, netResult = pcall(function()
    return ReplicatedStorage:WaitForChild("Packages", 10) -- Added timeout
        :WaitForChild("_Index", 10)
        :WaitForChild("sleitnick_net@0.2.0", 10)
        :WaitForChild("net", 10)
end)

if netSuccess and netResult then
    net = netResult
else
    -- Use WindUI for notification if loading fails after WindUI itself loaded
    WindUI:Notify({
        Title = "Dependency Error",
        Content = "Failed to load 'net' package. Trade features will not work.",
        Duration = 5,
        Icon = "ban",
    })
    warn("FATAL ERROR: Failed to load net package.")
    -- Script can continue, but trade features will error later.
end


-- =========================================================
-- [ NOTIFICATION FUNCTIONS ]
-- (No changes needed here)
-- =========================================================

local function NotifySuccess(title, message, duration)
	WindUI:Notify({
		Title = title,
		Content = message,
		Duration = duration or 3,
		Icon = "circle-check",
	})
end

-- (Other notification functions omitted for brevity, assume they are correct)

local function NotifyError(title, message, duration)
	WindUI:Notify({
		Title = title,
		Content = message,
		Duration = duration or 3,
		Icon = "ban",
	})
end

local function NotifyInfo(title, message, duration)
	WindUI:Notify({
		Title = title,
		Content = message,
		Duration = duration or 3,
		Icon = "info",
	})
end

local function NotifyWarning(title, message, duration)
	WindUI:Notify({
		Title = title,
		Content = message,
		Duration = duration or 3,
		Icon = "triangle-alert",
	})
end

-- =========================================================
-- [ UI SETUP ]
-- (No changes needed here)
-- =========================================================

local Window = WindUI:CreateWindow({
	Title = "Trade & Teleport",
	Icon = "hop",
	Author = "by dio",
	Size = UDim2.fromOffset(400, 450), 
	Transparent = true,
	Theme = "Dark",
})

Window:SetToggleKey(Enum.KeyCode.G)

local TradeTab = Window:Tab({
	Title = "Trade",
	Icon = "handshake",
})

Window:SelectTab(1)

-- =========================================================
-- [ TELEPORT FUNCTION ]
-- (No changes needed here)
-- =========================================================

local function teleportToPlayerExact(targetPlayer)
	local targetChar = targetPlayer.Character
	local myChar = LocalPlayer.Character

	if targetChar and myChar then
		local targetHRP = targetChar:FindFirstChild("HumanoidRootPart")
		local myHRP = myChar:FindFirstChild("HumanoidRootPart")
		if targetHRP and myHRP then
			-- Teleport 2 studs di depan target
			myHRP.CFrame = targetHRP.CFrame * CFrame.new(0, 0, -2)
			NotifySuccess("Teleport Successfully", "Successfully Teleported to " .. targetPlayer.DisplayName .. "!", 3)
			return true
		end
	end
	NotifyError("Teleport Failed", "Target player character or HRP not found.", 3)
	return false
end

-- =========================================================
-- [ TRADING FUNCTIONS & VARIABLES ]
-- =========================================================

local TradeFunction = {
	TempTradeList = {},
	saveTempMode = false,
	onTrade = false,
	targetUserId = nil,
	tradingInProgress = false,
	autoAcceptTrade = false,
	AutoTrade = false,
}

-- Check if net loaded successfully before accessing its contents
local REEquipItem
local RFAwaitTradeResponse
local InitiateTrade

if net then
    REEquipItem = net["RE/EquipItem"]
    RFAwaitTradeResponse = net["RF/AwaitTradeResponse"]
    InitiateTrade = net["RF/InitiateTrade"]
else
    -- If net failed to load, set remotes to a dummy function to prevent nil errors later
    local function dummyRemote(...) return nil end
    REEquipItem = { FireServer = dummyRemote }
    RFAwaitTradeResponse = { OnClientInvoke = function() return nil end }
    InitiateTrade = { InvokeServer = dummyRemote }
end

local function getPlayerListWithNone()
	local list = { "None" } -- Nilai default
	for _, player in ipairs(Players:GetPlayers()) do
		if player ~= LocalPlayer then
			table.insert(list, player.DisplayName .. " (" .. player.Name .. ")")
		end
	end
	return list
end

local TradeTargetDropdown = TradeTab:Dropdown({
	Title = "Select Target (Trade/Teleport)",
	Values = getPlayerListWithNone(),
	Value = "None", -- Default None
	Callback = function(selected)
		if selected == "None" then
			TradeFunction.targetUserId = nil
			NotifyInfo("Target Cleared", "Trade target has been set to None.")
			return
		end

		local username = selected:match("%((.-)%)")
		local player = Players:FindFirstChild(username)

		if player then
			-- Fitur Teleportasi
			if teleportToPlayerExact(player) then
				-- Jika teleport berhasil, set juga untuk target trade
				TradeFunction.targetUserId = player.UserId
			else
				TradeFunction.targetUserId = nil
				NotifyError("Action Failed", "Could not teleport to or set target for trade.")
			end
		else
			TradeFunction.targetUserId = nil
			NotifyError("Player Target", "Player not found!")
		end
	end,
})

-- (Dropdown refresh logic omitted for brevity, assume it is correct)

-- ... (Dropdown refresh logic and PlayerAdded/Removing events) ...

TradeTab:Toggle({
	Title = "Mode Save Items",
	Desc = "Click inventory item to add for Mass Trade",
	Value = false,
	Callback = function(state)
		TradeFunction.saveTempMode = state
		if state then
			TradeFunction.TempTradeList = {}
			NotifySuccess("Save Mode", "Enabled - Click items to save")
		else
			NotifyInfo("Save Mode", "Disabled")
		end
	end,
})

-- Namecall hook untuk mendeteksi klik item
local mt = getrawmetatable(game)
local oldNamecall = mt.__namecall
setreadonly(mt, false)

mt.__namecall = newcclosure(function(self, ...)
	local args = { ... }
	local method = getnamecallmethod()

	if tostring(self) == "RE/EquipItem" and method == "FireServer" then
		
		local uuid, categoryName = args[1], args[2]

		-- Mode Save Items (DIBLOKIR)
		if TradeFunction.saveTempMode then
			if uuid and categoryName then
				table.insert(TradeFunction.TempTradeList, { UUID = uuid, Category = categoryName })
			end
			return nil -- Blokir event EquipItem agar tidak equip item

		-- Mode Trade Original (Meng-equip DULU, baru Mengirim Trade)
		elseif TradeFunction.onTrade then
			
			if uuid and TradeFunction.targetUserId and categoryName then
				
				-- Pastikan remote functions ada sebelum memanggil (Tambahan pengamanan)
				if not REEquipItem or not InitiateTrade then
					NotifyError("Trade Error", "Trading remotes failed to load!")
					return nil
				end
				
				local targetPlayer = Players:GetPlayerByUserId(TradeFunction.targetUserId)
				local targetName = targetPlayer and targetPlayer.DisplayName or tostring(TradeFunction.targetUserId)

				task.spawn(function()
					-- 1. PANGGIL EVENT EQUIP SECARA MANUAL (Dilakukan DULU)
					REEquipItem:FireServer(uuid, categoryName)
					
					-- Beri waktu sedikit agar proses equip selesai/terdeteksi.
					task.wait(0.1)
					
					-- 2. KIRIM TRADE (Dilakukan KEMUDIAN)
					InitiateTrade:InvokeServer(TradeFunction.targetUserId, uuid, categoryName)
					
					NotifySuccess("Trade Sent", "Trade sent to " .. targetName .. " after equipping.")
				end)
				
				return nil -- Blokir oldNamecall
			end
			
			return nilÂ 
		end
	end

	-- Panggil fungsi asli untuk semua event lain atau jika tidak dalam mode kustom.
	if oldNamecall then
		return oldNamecall(self, unpack(args))
	else
		return self
	end
end)

setreadonly(mt, true)

-- (TradeAll, AutoTrade Toggle, Trade Toggle, Auto Accept Toggle functions omitted for brevity, assume they are correct)

-- ... (Sisa kode) ...
