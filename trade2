-- =========================================================
-- [ DEPENDENCIES & VARIABLES ]
-- (Tidak ada perubahan di bagian ini)
-- =========================================================
-- ... (Kode DEPENDENCIES & VARIABLES, NOTIFICATION FUNCTIONS, dan UI SETUP Anda)

-- ... (Kode TELEPORT FUNCTION Anda)

-- =========================================================
-- [ TRADING FUNCTIONS & VARIABLES ]
-- (Tidak ada perubahan di bagian ini)
-- =========================================================

-- ... (Kode TradeFunction, net events, getPlayerListWithNone, Dropdown, Toggle 'Mode Save Items', dan Namecall Hook Anda)

-- =========================================================
-- [ MASS TRADE AUTOMATION FUNCTIONS ]
-- =========================================================

-- Fungsi untuk mendapatkan semua item dari inventaris pemain secara otomatis.
-- !!! PENTING: Anda mungkin perlu mengganti logika di dalam fungsi ini
-- !!! agar sesuai dengan struktur data inventaris di game Anda.

local function LoadAllInventory()
    TradeFunction.TempTradeList = {}
    
    -- ########### ASUMSI LOKASI DATA INVENTORY ###########
    -- Kami mencari tempat data inventaris disimpan. Ini SANGAT bergantung pada game.
    -- Opsi 1: Mencoba mendapatkan data inventaris melalui LocalPlayer.Data atau Folder Items.
    local playerInventory = LocalPlayer:FindFirstChild("PlayerStats") -- GANTI NAMA FOLDER INI
    
    if not playerInventory then
        NotifyError("Load Failed", "Tidak dapat menemukan folder data pemain (Asumsi: PlayerStats).")
        return false
    end
    
    local itemFound = 0
    
    -- ASUMSI: Data item (misalnya buah, pedang, dll.) disimpan sebagai Child di PlayerStats
    -- dengan format: InstanceName = UUID, dan kita perlu tahu Category.
    -- Karena kita menggunakan net event 'EquipItem(uuid, category)', kita harus mencari
    -- pasangan uuid dan category. Ini sangat sulit tanpa mengetahui struktur game.
    
    -- Contoh Struktur yang Mungkin Benar (untuk game yang menggunakan struktur data unik):
    -- local fruits = playerInventory:FindFirstChild("Fruits") 
    -- local swords = playerInventory:FindFirstChild("Swords")
    
    -- KARENA KESULITAN MENEMUKAN STRUKTUR DATA TANPA KONTEKS GAME, 
    -- kami akan mencoba menggunakan 'FindFirstChildOfClass("StringValue")' 
    -- atau Child lainnya yang mungkin menyimpan UUID/Kategori.
    
    -- UNTUK SCRIPT INI BERFUNGSI, ANDA HARUS SECARA MANUAL MENGGANTI BAGIAN INI:
    -- Contoh di bawah HANYA berfungsi jika item disimpan sebagai objek bernama "UUID" 
    -- dan "Category" di dalam folder inventory yang bisa diakses.
    
    -- KARENA KODE ANDA SUDAH MENGGUNAKAN MODE SAVE ITEMS DENGAN KLIK, 
    -- KAMI AKAN MEMBIARKAN INI SEBAGAI PENGGUNAAN UTAMA, dan MENGGUNAKAN 
    -- TOMBOL CLEAR SEBAGAI PELENGKAP.
    
    -- JIKA ANDA TAHU LOKASI DATANYA, GANTI KODE DI SINI.
    -- Contoh (TIDAK AKAN BERFUNGSI TANPA LOKASI PASTI):
    -- for categoryName, itemData in pairs(gameData:GetInventory()) do
    --     for uuid, data in pairs(itemData) do
    --         table.insert(TradeFunction.TempTradeList, { UUID = uuid, Category = categoryName })
    --         itemFound += 1
    --     end
    -- end
    
    NotifyWarning("Load Item", "Fungsi 'Load All' memerlukan penyesuaian kode agar sesuai dengan struktur data inventory game Anda.")
    NotifyInfo("Load All", "Gunakan 'Mode Save Items' dan klik item secara manual jika Load Otomatis gagal.")
    return false -- Kembalikan false karena tidak ada kode load otomatis yang universal
end

-- =========================================================
-- [ UI INTEGRATION: MASS TRADE ]
-- =========================================================

TradeTab:Button({
	Title = "Load All Inventory (Manual Config)",
	Desc = "Mencoba memuat semua item inventaris secara otomatis. (Membutuhkan konfigurasi kode)",
	Icon = "database",
	Callback = function()
		LoadAllInventory()
	end,
})

TradeTab:Button({
	Title = "Clear Saved Items List",
	Desc = "Hapus semua item yang tersimpan di Mass Trade List.",
	Icon = "x",
	Callback = function()
		TradeFunction.TempTradeList = {}
		NotifyInfo("List Cleared", "Mass Trade List telah dikosongkan.")
	end,
})


-- =========================================================
-- [ LOGIKA TRADEALL & UI LAINNYA ]
-- =========================================================

local function TradeAll()
	-- ... (Fungsi TradeAll yang sudah ada)
    -- Saya menjaga fungsi TradeAll Anda tetap seperti aslinya.
	if TradeFunction.tradingInProgress then
		NotifyWarning("Mass Trade", "Trade already in progress!")
		return
	end
	if not TradeFunction.targetUserId then
		NotifyError("Mass Trade", "Set trade target first!")
		return
	end
	if #TradeFunction.TempTradeList == 0 then
		NotifyWarning("Mass Trade", "No items saved!")
		return
	end

	TradeFunction.tradingInProgress = true
	NotifyInfo("Mass Trade", "Starting trade of " .. #TradeFunction.TempTradeList .. " items...")

	task.spawn(function()
		local successCount = 0
		for i, item in ipairs(TradeFunction.TempTradeList) do
			if not TradeFunction.AutoTrade then
				NotifyWarning("Mass Trade", "Auto Trade stopped manually!")
				break
			end

			local uuid = item.UUID
			local category = item.Category

			NotifyInfo("Mass Trade", "Trade item " .. i .. " of " .. #TradeFunction.TempTradeList)

			-- Kirim trade request
			InitiateTrade:InvokeServer(TradeFunction.targetUserId, uuid, category)

			-- Tunggu notifikasi "Trade completed!"
			local tradeCompleted = false
			local timeout = 10
			local elapsed = 0

			local notifGui = LocalPlayer.PlayerGui:WaitForChild("Text Notifications")
			local connection

			connection = notifGui.Frame.ChildAdded:Connect(function(child)
				task.wait(0.5)
				local header = child:FindFirstChild("Header")
				if header and header:IsA("TextLabel") and header.Text == "Trade completed!" then
					tradeCompleted = true
				end
			end)

			repeat
				task.wait(0.2)
				elapsed += 0.2
			until tradeCompleted or elapsed >= timeout

			if connection then
				connection:Disconnect()
			end

			if tradeCompleted then
				successCount += 1
				NotifySuccess(
					"Mass Trade",
					"Success " .. i .. " of " .. #TradeFunction.TempTradeList .. ". Waiting for next..."
				)
				task.wait(6.5) -- Cooldown antar trade
			else
				NotifyWarning("Mass Trade", "Trade timeout/failed for item " .. i .. ". Proceeding...")
				task.wait(2)
			end
		end

		NotifySuccess(
			"Mass Trade",
			"Finished trading! Total success: " .. successCount .. "/" .. #TradeFunction.TempTradeList
		)
		TradeFunction.tradingInProgress = false
		TradeFunction.TempTradeList = {} -- Hapus daftar setelah selesai
	end)
end

TradeTab:Toggle({
	Title = "Auto Trade (Mass Trade)",
	Desc = "Trade all saved items automatically",
	Value = false,
	Callback = function(state)
		TradeFunction.AutoTrade = state
		if TradeFunction.AutoTrade then
            -- Opsional: Panggil LoadAllInventory() di sini jika Anda yakin dengan kodenya
            -- LoadAllInventory() 
            
			if #TradeFunction.TempTradeList == 0 then
				NotifyError("Mass Trade", "No items saved to trade! Klik 'Load All Inventory' atau gunakan 'Mode Save Items'.")
				TradeFunction.AutoTrade = false
				return
			end
			TradeAll()
			NotifySuccess("Mass Trade", "Auto Trade Enabled")
		else
			NotifyWarning("Mass Trade", "Auto Trade Disabled")
		end
	end,
})

-- ... (Kode Toggle 'Trade (Single Item)', dan Auto Accept Anda)
